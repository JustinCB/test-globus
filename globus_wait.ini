globus_wait () {
	downs=0
	while true
	do
		#we exit on severall conditions, tho, so not really infinite loop
		globus task wait --timeout 30 $1
		tmp=$?
		if [ $tmp = 1 ]
		then
			if [ "`globus task show $1 | awk '/Details/{print $NF}'`" = "GC_NOT_CONNECTED" ]
			then
				downs=`expr $downs + 1`
				if [ $downs = 1 ]
				then
					echo Endpoint is not connected after 1 try
				else
					echo Endpoint is not connected after $downs tries
				fi
				if [ $downs -gt 5 ]
				then
					>&2 echo "Endpoint is down, so transfer probably fail'd"
					if [ ! "`netstat -lt | awk '$4 ~ /[\.:]((5[01]...)|(gsiftp))/'`" ]
					then
						>&2 echo "Ensure connections on ports 50000-51000 aren't block'd by your firewall rules"
					fi
					exit 1
				else
					sleep 1
				fi
			elif [ "`globus task show $1 | awk '/Details/{print $NF}'`" = "CONNECT_FAILED" ]
			then
				>&2 echo "Transfer fail'd because endpoint is down"
				if [ ! "`netstat -lt | awk '$4 ~ /:5[01].../ || $4 ~ /.5[01].../'`" ]
				then
					>&2 echo "Ensure connections on ports 50000-51000 aren't block'd by your firewall rules"
				fi
				exit 1
			fi
			if [ "`globus task show $1 | awk '/Status/{print $NF}'`" = "SUCCEEDED" ]
			then
				#succeeded between timeout & getting here
				exit 0
			elif [ "`globus task show $1 | awk '/Status/{print $NF}'`" = "ACTIVE" ]
			then
				#loop back again, then
				true #a command is done, not an empty loop
			else
				>&2 echo "Test Error: Transfer timed out/finished & is paused or canceled"
				exit 1
			fi
		elif [ $tmp != 0 ]
		then
			# globus task wait has (probably) printed an error message, so just exit
			exit $tmp
		else
			#succeeded
			exit 0
		fi
	done
}
